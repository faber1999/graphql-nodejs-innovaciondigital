# Start Schemas

type Query {
    user(id: ID): [User!]!
    # author(id: ID): [Author!]!
    # book(id: ID): [Book!]!
}

type User {
    id: ID!
    name: String!
    lastname: String!
    documentNumber: String!
    addres: String
    cellphoneNumber: String!
    phoneNumber: String
    email: String!
    userTypeId: Int!
    documentTypeId: Int!
    documentImageId: Int
}

# type User {
#     id: ID!
#     name: String!
#     lastname: String!
#     documentNumber: String!
#     addres: String
#     cellphoneNumber: String!
#     phoneNumber: String
#     email: String!
#     password: String!
#     userTypeId: int!
#     documentTypeId: int!
#     documentImageId: int
# }



# type Author {
#     id: ID!
#     name: String!
#     country: String!
#     register_by: User!
#     books: [Book!]!
# }

# type Book {
#     id: ID!
#     title: String!
#     description: String!
#     quantity: Int!
#     price: Float!
#     writted_by: Author!
#     register_by: User!
# }

# End Schemas



# Start Mutations

type Mutation {

    signUp(data: signUpInput!): AuthPayload!
    login(data: loginInput!): AuthPayload!
    # updateUser(id: ID!, data: updateUserInput): User!

    # createAuthor(data: createAuthorInput): Author!
    # updateAuthor(id: ID!, data: updateAuthorInput): Author!

    # createBook(data: createBookInput): Book!
    # updateBook(id: ID!, data: updateBookInput): Book!
    # deleteBook(id: ID!): Book!
}

# End Mutations



# Start Subscriptions

# type Subscription {
#     author: AuthorSubscriptionPayload!
#     book(authorId: ID!): BookSubscriptionPayload
# }

# enum MutationType {
#     CREATED
#     UPDATED
#     DELETED
# }

# type AuthorSubscriptionPayload {
#     mutation: MutationType!
#     data: Author!
# }

# type BookSubscriptionPayload {
#     mutation: MutationType!
#     data: Book!
# }

# End Subscriptions



# Start Inputs
input signUpInput {
    name: String!
    lastname: String!
    email: String!
    documentNumber: String!
    cellphoneNumber: String!
    userTypeId: Int!
    documentTypeId: Int!
    password: String!
}

input loginInput {
    email: String!
    password: String!
}

# input updateUserInput {
#     name: String
#     lastname: String
#     email: String
#     password: String
# }

type AuthPayload {
    user: User!
    token: String!
}

# input createAuthorInput {
#     name: String!
#     country: String!
#     register_by: ID!
# }

# input updateAuthorInput {
#     name: String
#     country: String
#     register_by: ID
# }

# input createBookInput {
#     title: String!
#     description: String!
#     quantity: Int!
#     price: Float!
#     writted_by: ID!
#     register_by: ID!
# }

# input updateBookInput{
#     title: String
#     description: String
#     quantity: Int
#     price: Float
#     writted_by: ID
#     register_by: ID
# }

# End Inputs



# Types 

# Int 
# Float
# String
# Boolean
# ID